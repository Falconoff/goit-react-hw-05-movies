{"version":3,"file":"static/js/857.298d930f.chunk.js","mappings":"4PACaA,E,QAAWC,GAAAA,GAAH,2K,SCON,SAASC,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAeF,EAAaG,IAAI,UAEtCC,EAAAA,EAAAA,YAAU,WACJF,IAEFG,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAC1BF,KAAKV,KAET,CAACM,KAEJE,EAAAA,EAAAA,YAAU,WACJT,GAA4B,IAAlBA,EAAOc,QACnBC,EAAAA,GAAAA,KAAW,wBAEZ,CAACf,IAaJ,OACE,4BACE,kBAAMgB,SAbO,SAAAC,GACfA,EAAIC,iBACJ,IAAMC,EAAQF,EAAIG,cAAcC,SAASC,WAAWC,MAE/B,KAAjBJ,EAAMK,OAIVlB,EAAgB,CAAEa,MAAOA,IAHvBJ,EAAAA,GAAAA,KAAW,6BAQX,WACE,kBACEU,KAAK,OACLC,KAAK,aACLC,aAAa,MACbC,WAAS,EACTC,YAAY,mBAEd,mBAAQJ,KAAK,SAAb,uBAGDzB,IACC,gCACGA,EAAOc,OAAS,IACf,wBACGd,EAAO8B,KAAI,SAAAC,GACV,OACE,SAACnC,EAAD,WACE,SAAC,KAAD,CAAMoC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMjC,GAAxC,SACG6B,EAAMK,SAFIL,EAAME,SASV,IAAlBjC,EAAOc,SAAgB","sources":["views/MoviesPage/MoviesPage.styled.jsx","views/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ListItem = styled.li`\n  margin-bottom: 4px;\n  :hover,\n  :focus {\n    color: var(--accent-color);\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { getMoviesByName } from '../../service/apiService';\n\nimport { ListItem } from './MoviesPage.styled';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState(null);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n  const currentQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (currentQuery) {\n      // fetch\n      getMoviesByName(currentQuery)\n        .then(response => response.results)\n        .then(setMovies);\n    }\n  }, [currentQuery]);\n\n  useEffect(() => {\n    if (movies && movies.length === 0) {\n      toast.warn('Nothing was found!');\n    }\n  }, [movies]);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n    const query = evt.currentTarget.elements.inputValue.value;\n    // for empty query\n    if (query.trim() === '') {\n      toast.warn('Please, enter your query');\n      return;\n    }\n    setSearchParams({ query: query });\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          name=\"inputValue\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {movies && (\n        <>\n          {movies.length > 0 && (\n            <ul>\n              {movies.map(movie => {\n                return (\n                  <ListItem key={movie.id}>\n                    <Link to={`${movie.id}`} state={{ from: location }}>\n                      {movie.title}\n                    </Link>\n                  </ListItem>\n                );\n              })}\n            </ul>\n          )}\n          {movies.length === 0 && <p>Nothing was found</p>}\n        </>\n      )}\n    </div>\n  );\n}\n"],"names":["ListItem","styled","MoviesPage","useState","movies","setMovies","location","useLocation","useSearchParams","searchParams","setSearchParams","currentQuery","get","useEffect","getMoviesByName","then","response","results","length","toast","onSubmit","evt","preventDefault","query","currentTarget","elements","inputValue","value","trim","type","name","autoComplete","autoFocus","placeholder","map","movie","to","id","state","from","title"],"sourceRoot":""}